# -*- coding: utf-8 -*-
"""ShowImage.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m7-0fpFyMChSnGQwB519STdqnSVUyQAu
"""

from __future__ import absolute_import, division, print_function, unicode_literals

import tensorflow as tf

import numpy as np

import argparse
import os
import sys
from tensorflow.keras import Model

import matplotlib
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec


def gen_mclist(X_data, Y_data, model):
  y_pred = model.predict(X_data)
  prediction_labels = np.argmax(y_pred, axis = -1)
  actual_labels = np.argmax(Y_data, axis = -1)
    
  mc_idx = []
  for idx,val in enumerate(actual_labels):
    if val != prediction_labels[idx]:
      mc_idx.append(idx)
  return prediction_labels,actual_labels,mc_idx

def plot(ncols: int, nrows: int, X_data, Y_data, class_list:[], actual_labels: [], prediction_labels: [], idx_list: [], title: str, flag: int):
  fig=plt.figure(figsize=(100, 100))
  spec = gridspec.GridSpec(ncols=ncols, nrows=nrows, figure=fig)
  fig.tight_layout()
  spec.update(top=0.97)
  for i in range(nrows):
    for j in range(ncols):
      idx = idx_list[i] 
      img = X_data.reshape(X_data.shape[0], 32, 32, 3)[idx]
      fig.suptitle(title, horizontalalignment='left')
      fig.add_subplot(spec[i, j])
      fig.subplots_adjust(hspace= 0.6, wspace= -0.95)
      if flag == 1:
        if j == 0:
          plt.title("Actual Class : {}".format(class_list[actual_labels[idx]]))
          plt.imshow(img,interpolation = 'spline16')
        else:
          plt.title("Predicted Class : {} ".format(class_list[prediction_labels[idx]]))
          plt.imshow(img,interpolation = 'spline16')
      elif flag == 2:
        if j == 0:
          plt.title("Actual Class : {}".format(class_list[actual_labels[idx]]))
          plt.imshow(img,interpolation = 'spline16')
        else:
          pass
      elif flag == 3:
        if j == 0:
          pass
        else:
          plt.title("Predicted Class : {} ".format(class_list[prediction_labels[idx]]))
          plt.imshow(img,interpolation = 'spline16')
        
        
def ShowImage(X_data, Y_data, class_list:[], model, num: int, category: str, class_name: str):
  prediction_labels,actual_labels,mc_idx = gen_mclist(X_data, Y_data, model = model) 
  if category == "Misclassified":
    idx_list = [mc_idx[i] for i in range(num)]
    plot(ncols = 2, nrows = num, X_data = X_data, Y_data = Y_data, class_list = class_list, actual_labels = actual_labels, prediction_labels = prediction_labels, idx_list = idx_list, title = "Misclassified Images", flag=1)      
  elif category == "ParticularClass":
    if class_name in class_list:
      pclabel = class_list.index(class_name)
    pc_idx = []
    for idx,val in enumerate(actual_labels):
      if val == pclabel:
        pc_idx.append(idx)
    idx_list = [pc_idx[i] for i in range(num)]
    plot(ncols = 2, nrows = num, X_data = X_data, Y_data = Y_data, class_list = class_list, actual_labels = actual_labels, prediction_labels = prediction_labels, idx_list = idx_list, title = class_name +" Images", flag=2)
  elif category == "MisclassifiedClass":
    if class_name in class_list:
      mcclabel = class_list.index(class_name)
    mcc_idx = []
    for idx,val in enumerate(actual_labels):
      if val == mcclabel and val != prediction_labels[idx]:
        mcc_idx.append(idx)
    idx_list = [mcc_idx[i] for i in range(num)]
    plot(ncols = 2, nrows = num, X_data = X_data, Y_data = Y_data, class_list = class_list, actual_labels = actual_labels, prediction_labels = prediction_labels, idx_list = idx_list, title = class_name + "Misclassified Images", flag=3)
  else:
    rc_idx = [idx for idx,val in enumerate(actual_labels)]
    idx_list = [rc_idx[i] for i in range(num)]
    plot(ncols = 2, nrows = num, X_data = X_data, Y_data = Y_data, class_list = class_list, actual_labels = actual_labels, prediction_labels = prediction_labels, idx_list = idx_list, title = "Random Images", flag=2)

